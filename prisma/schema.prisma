// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

model Chat {
  id        String   @id @default(cuid())
  name      String ///@zod.string.min(1, { message: "Please enter a chat name" })
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
}

model Message {
  id        String      @id @default(cuid())
  type      MessageType @default(TEXT)
  role      MessageRole @default(USER)
  content   String      @db.Text ///@zod.string.min(1, { message: "Please enter a message" })
  sql       String?
  results   Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  responseTo   Message? @relation("ResponseTo", fields: [responseToId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  responseToId String?

  responses Message[] @relation("ResponseTo")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  TEXT
  TABLE
  CHART
}

/// Exposed to AI

model Application {
  id           String            @id @default(cuid())
  amount       Float
  language     Language          @default(ENGLISH)
  status       ApplicationStatus @default(PENDING)
  productLine  ProductLine       @default(INPUT_FINANCING)
  businessLine BusinessLine      @default(SMALL_BUSINESS)
  channel      Channel           @default(ALLIANCE_SERVICES)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  completedAt  DateTime?

  outlet   BusinessPartner @relation("OutletApplications", fields: [outletId], references: [id], onDelete: Cascade)
  outletId String

  borrower   BusinessPartner @relation("BorrowerApplications", fields: [borrowerId], references: [id], onDelete: Cascade)
  borrowerId String
}

model BusinessPartner {
  id          String              @id @default(cuid())
  type        BusinessPartnerType @default(CUSTOMER)
  displayName String
  email       String
  phone       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String

  outletApplications   Application[] @relation("OutletApplications")
  borrowerApplications Application[] @relation("BorrowerApplications")
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  province  String
  postal    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessPartners BusinessPartner[]
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum ProductLine {
  INPUT_FINANCING
}

enum BusinessLine {
  SMALL_BUSINESS
  CORPORATE_AND_COMMERCIAL
}

enum Channel {
  ALLIANCE_SERVICES
  JET
  ONLINE_SERVICES
}

enum Language {
  ENGLISH
  FRENCH
}

enum BusinessPartnerType {
  ALLIANCE_PARTNER
  CUSTOMER
}

/// End exposed to AI
